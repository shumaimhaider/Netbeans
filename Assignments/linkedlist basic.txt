
package node;

import java.util.Scanner;


public class Node {
    int data;
    int countd;
    int position;
    int user;
    Node next;
    Node head,tail;
    Node firstNode,firstNode1;
        public Node() {
    }

    Node(int v){
        data=v;
        next=null;
    }
    Node(int info,int value){
        position=value;
        data=info;
        next=null;
          
    }
 
     ///copy constructor
    Node(Node c){ 
    Node n=c.head;
    Node back=null;
    while(n!=null)
{
    Node copy = new Node(data);
    if(back!=null){
        back.next=copy;
    }else{
        head=copy;
    }
    n=n.next;
    back=copy;
}
tail=back;
    }
  //////////////////////////////////////
    public void AtStart(int data){
        Node nNode=new Node(data);
      
        if(head==null){
            head=nNode;
            tail=nNode;
        }else{
            nNode.next=head;
            head=nNode;
        }
    
    }
    ////////////////////////////////////
    public void AtLast(int data){
        Node nNode=new Node(data);
        if(head==null){
            head=nNode;
            tail=nNode;
        }else{
            tail.next=nNode;
            tail=nNode;
        }
    }
  
    
    public void insertOwn(int index,int data){
        Node nNode=new Node();
        nNode.data=data;
        nNode.next=null;
        Node n=head;
        if(index==0 || index-1==0){
            AtStart(data);
        }else{
            index=index-1;
        for(int i=0;i<index-1;i++){
            n=n.next;
        }
        nNode.next=n.next;
        n.next=nNode;
    }
    }
    public void Display(){
        
        Node temp=head;
        if(head==null){
            System.out.println("list is empty");
          
        }
        System.out.println(" nodes ");
        while(temp !=null){
            System.out.println(temp.data+"");
            temp=temp.next;
        }
        System.out.println();
    }
    ////////////////////////////////
    
    public int getSize(){
    int count=0;
    Node temp=head;
    while(temp!=null){
    temp=temp.next;
    count++;
}
    System.out.println(count);
    countd=count;
    return count;
    }
    /////////////////////////////////////////////////////////
    public void deleteFirst(){
        if(head==null){
            System.out.println("list is empty");
            return;
        }else{
            if(head!=tail){
                head=head.next;
            }else{
                head=null;
                tail=null;
                System.out.println("node has been deleted");
            }
        }
    }
   
    ////////////////////////////////////////////////
    public void deleteLast(){
         Node p=head;
        if(head==null){
            System.out.println("list is empty");
            return ;        
        }else{
            while(p.next!=tail){
                p=p.next;
            }
        tail=p;
        tail.next=null;
              }
    }
    Scanner objScanner=new Scanner(System.in);
    ////////////////////////////////////////////////////////
    
     public void deletePosition(int index) {
         Node n=head;
         Node n1=null;
         if(index==0 || index-1==0){
             head=head.next;
         }else{
             index=index-1;
             for(int i=0; i<index-1;i++){
                 n=n.next;
             }
                n1=n.next;
                n.next=n1.next;
                System.out.println(n1.data +"deleted");
         }
           
}  
    ////////////////////////////////////////////////////////
    public void deleteValue(){
        int value;
        Node present=head;
        Node n=null;
        System.out.println("Enter the number you wanna delete");
        value=objScanner.nextInt();
           if(present!=null&&present.data==value){
             present=present.next;
         }   
           while(present!=null&&present.data!=value){
          n=present;
          present=present.next;
        
    }
           
         n.next=present.next; 
    }
    ///////////////////////////////////////////////////////////
    public int minimum(int minimum){
     
        Node present=head;
        minimum=head.data;
        if(head==null){
            System.out.println("list is empty");
            
        }
        while(present!=null){
            if(minimum>present.data){
                minimum=present.data;  
            }
             present=present.next;
        }
        System.out.println("Smallest number among nodes is"+minimum);
        return minimum;
    }
    ////////////////////////////////////////////////////////////
    public int maximum(int maximum){
        Node present=head;
        maximum=present.data;
    if(head==null){
      System.out.println("list is empty");
}
    while(present!=null){
        if(maximum<present.data){
            maximum=present.data;
        }
        present=present.next;
}
    System.out.println("maximum number among nodes is "+maximum);
      return maximum;
    }
    ////////////////////////////////////////////////////////////////
   public int searchValue(int search){
       System.out.println("enter the value you wanna search");
       search=objScanner.nextInt();
       Node present=head;
       int count=0;
       boolean found=false;
       while(present!=null){
           count++;
           if(search==present.data){
               System.out.println("Given number found at"+count);
               found=true;
           }
           present=present.next;
       }
       if(found==false){
           System.out.println("mumber not found among nodes");
       }
       return search;
   }
   public Node addSort(int data){
       Node nNode=new Node(data);
       if(head==null||head.data>data){
           nNode.next=head;
           head=nNode;
           return head;
       }
       Node temp=head,back=null;
         while(temp!=null){
             if(temp.data>data){
                 back.next=nNode;
                 nNode.next=temp;
                 return head;
             }
             back=temp;
             temp=temp.next;
         }
        back.next=nNode;
        return head;
   }
    public void Display2ndLast(){
       Node present=head;
       Node back=null;
       Node t=tail;
       while(present!=null){
           back=present;
              if(back.next==tail){
                  System.out.println(back.data);
              }
           present=present.next;
        }
   }
   public void mergeSort(Node objNode, Node objNode2,Node objNode3) {
    
    Node nNode = new Node();
    Node p;
    p=objNode3;
    Node current1=objNode.head;
    Node current2=objNode2.head;
    while(current1!=null && current2!=null){
            p.addSort(current1.data);
            current1 = current1.next;
            p.addSort(current2.data);
            current2 = current2.next;
        }
       if(current1!=null){
        p.addSort(current1.data);
    }
    if(current2!=null){
        p.addSort(current2.data);
    }
    
    
}
   public Node  copyNode(){
       Node current=head;
       Node  temp=head;
       while(temp!=null){
           Node nNode=new Node(data);
           temp=temp.next;
           current.next=nNode;
           nNode.next=temp;
           nNode.data=current.data;
           current=current.next.next;
           System.out.println(nNode.next);
       }
  
       return head;
   }

    public static void main(String[] args) {
        // TODO code application logic here
        Node objNode=new Node();
        Node objNode2=new Node();
        Node objNode3=new Node();
       // Node c=new Node(objNode);
       
        //objNode.addSort(objNode,1);

       // objNode.AtStart(2);
        objNode.AtStart(7);
        objNode.AtStart(7);
        objNode.AtStart(6);
        objNode.Display();
        objNode2.AtStart(1);
        objNode2.AtStart(3);
        objNode2.AtStart(2);
        objNode2.Display();
       
      //  objNode.Display();
//        System.out.println("____________");
//        objNode.copyNode();
//        objNode.Display();
//        objNode2.AtStart(5);
//        objNode2.AtStart(6);
//        objNode.AtStart(11);
        objNode.mergeSort(objNode,objNode2,objNode3);
        objNode3.Display();
//        objNode2.Display();
//        objNode3.Display();
//        objNode.Display2ndLast();
//      
//     
//        objNode. insertOwn(1,55);
//        objNode.Display();
//    
//        objNode.getSize();
//        objNode.deleteFirst();
//        objNode.Display();
        
//          
//          objNode.maximum(0);
//          objNode.minimum(0);
//          objNode.searchValue(5);
//          objNode.deletePosition(1);
//         objNode.Display();
////            objNode.deleteValue();
//           objNode.Display();
            
 }

}
