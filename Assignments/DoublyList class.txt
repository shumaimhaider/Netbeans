/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package noded;

import java.util.Scanner;

/**
 *
 * @author hp
 */
public class DoublyList {
 NodeD head,tail;
 Scanner objScanner=new Scanner(System.in);
    public void AtTail(int data){
        NodeD nNode=new NodeD(data);;
        if(head==null){
           head=tail=nNode;      
        }else{
         nNode.previous=tail;
         tail.next=nNode;
         tail=nNode;  
        }
       
    }
    public void AtHead(int data){
        NodeD nNode=new NodeD(data);
        if(head==null){
            head=tail=nNode;
            
        }else{
            nNode.next=head;
            head.previous=nNode;
            head=nNode;
        }
    }
     public void AtPosition(int position,int value){
         
        NodeD nNode=new NodeD(value);
        NodeD temp=head;
        NodeD previous=tail;
        if(position==0||position-1==0){
            AtHead(value);
        }else{
            position=position-1;
            for(int i=0;i<position-1;i++){
                temp=temp.next;
            }
            nNode.next=temp.next;
            nNode.previous=temp.previous;
            temp.next=nNode;
            temp.previous=nNode.previous;
        }
    }
     public NodeD addSorted(int data){
         
          NodeD nNode=new NodeD(data);
          if(head==null||head.data>data){
              AtHead(data);
              return head;
          }
              NodeD temp=head,back=null;
              while(temp!=null){
             if(temp.data>data){
                back.next=nNode;
                back.previous=nNode.previous;
                nNode.next=temp;
                nNode.previous=temp.previous;
              return head;
              }
              back=temp;
              temp=temp.next;
              
              return head;
              }
              nNode.next=null;
              temp.next=nNode;
              nNode.previous=temp.previous;
              return head;
     }
     public int deleteAtHead(){
         NodeD temp=head.next;
         head.next=null;
         temp.previous=null;
         head=temp;
         return 1;
     }
     public int deleteTail(){
         NodeD temp=tail.previous;
               tail.previous=null;
               temp.next=null;
               tail=temp;
               return 1;
     }
     public int delteNodePosition(int position){
         NodeD current=head;
         NodeD n=null;
         if(position==0||position-1==0){
             deleteAtHead();
         }else{
             position=position-1;
         for(int i=0;i<position-1;i++){
             n=current;
             current=current.next;   
         }
         n=current.next;
         current.next=n.next;
         if(n!=tail){
         n.previous=current.next.previous;
         current=null;
     }else{
           deleteTail();  
         }
         }
         return 1;
     }
    
     public void Size(){
         int count=0;
         NodeD temp=head;
         while(temp!=null){
             temp=temp.next;
             count++;
         }
         System.out.println(count);
     }
     public int searchValue(int search){
       System.out.println("enter the value you wanna search");
       search=objScanner.nextInt();
       NodeD temp=head;
       int count=0;
       boolean found=false;
       while(temp!=null){
           count++;
           if(search==temp.data){
               System.out.println("Given number found at"+count);
               found=true;
           }
           temp=temp.next;
       }
       if(found==false){
           System.out.println("mumber not found among nodes");
       }
       return search;
   }
     public int maximum(int maximum){
        NodeD current=head;
        maximum=current.data;
        if(head==null){
       System.out.println("list is empty");
}
    while(current!=null){
        if(maximum<current.data){
            maximum=current.data;
        }
        current=current.next;
}
    System.out.println("maximum number among nodes is "+maximum);
      return maximum;
    }
    public int Minimum(){
        NodeD current=head;
        int minimum=current.data;
        if(head==null){
            System.out.println("List is empty");
        }
        while(current!=null){
            if(minimum>current.data){
                minimum=current.data;
            }
            current=current.next;
        }
        System.out.println("Minimum "+minimum);
        return minimum;
    }
    public void Display(){
    NodeD n=head;
    while(n!=null){
        System.out.println(n.data+" ");
         n=n.next;
}     
}
 
}
